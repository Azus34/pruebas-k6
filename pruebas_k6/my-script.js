// Generated by Grafana k6 Studio - Adapted for Quick Pizza
// Load Test Script for https://quickpizza.grafana.com/

import { group, sleep, check } from "k6";
import http from "k6/http";
import { Counter, Trend, Rate } from "k6/metrics";

// M√©tricas personalizadas
const pizzaGenerationTime = new Trend("pizza_generation_time");
const successRate = new Rate("success_rate");
const apiErrors = new Counter("api_errors");

// Configuraci√≥n de pruebas de carga
export const options = {
  stages: [
    { target: 5, duration: "1m" },     // Ramp-up: 5 usuarios en 1m
    { target: 10, duration: "3m30s" }, // Incrementar y mantener 10 usuarios
    { target: 0, duration: "1m" },     // Ramp-down
  ],
  thresholds: {
    http_req_duration: ["p(95)<2000", "p(99)<3000"],
    http_req_failed: ["rate<0.5"],
    success_rate: ["rate>0.5"],
  },
  // Integraci√≥n con Grafana Cloud
  cloud: {
    projectID: 5266622,
    name: "Quick Pizza Load Test"
  }
};

const BASE_URL = "https://quickpizza.grafana.com";

export default function () {
  // Escenario 1: Homepage
  homepageScenario();
  sleep(1);
  
  // Escenario 2: Generar y calificar pizza
  generatePizzaScenario();
  sleep(1);
}

// Escenario 1: Cargar Homepage
function homepageScenario() {
  group("üè† Homepage - Load Initial Page", function () {
    const params = {
      headers: {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
        "Accept-Language": "es-ES,es;q=0.9,en;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
      },
      tags: { name: "Homepage" },
    };

    const res = http.get(`${BASE_URL}/`, params);

    const homeCheck = check(res, {
      "‚úì Homepage status 200": (r) => r.status === 200,
      "‚úì Homepage responde r√°pido": (r) => r.timings.duration < 2000,
      "‚úì Homepage contiene contenido": (r) => r.body && r.body.length > 100,
    });

    successRate.add(homeCheck);
  });
}

// Escenario 2: Generar pizza personalizada
function generatePizzaScenario() {
  group("üçï Generate & Rate Custom Pizza", function () {
    const startTime = Date.now();

    // Array de toppings disponibles
    const toppingOptions = [
      "pepperoni",
      "basil",
      "mozzarella",
      "onions",
      "mushrooms",
      "olives",
      "sausage",
      "spinach",
      "tomato"
    ];

    // Seleccionar toppings aleatorios (2-4 toppings)
    const selectedToppings = [];
    const numToppings = Math.floor(Math.random() * 3) + 2;
    
    for (let i = 0; i < numToppings; i++) {
      const randomIdx = Math.floor(Math.random() * toppingOptions.length);
      if (!selectedToppings.includes(toppingOptions[randomIdx])) {
        selectedToppings.push(toppingOptions[randomIdx]);
      }
    }

    // Generar pizza
    const pizzaPayload = JSON.stringify({
      toppings: selectedToppings,
      size: ["small", "medium", "large"][Math.floor(Math.random() * 3)],
    });

    const generateParams = {
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      tags: { name: "GeneratePizza" },
    };

    const generateRes = http.post(`${BASE_URL}/api/pizza`, pizzaPayload, generateParams);
    const generationDuration = Date.now() - startTime;
    pizzaGenerationTime.add(generationDuration);

    const generateCheck = check(generateRes, {
      "‚úì Pizza generation status 200/201": (r) => 
        r.status === 200 || r.status === 201 || r.status === 202,
      "‚úì Pizza generation responde en tiempo": (r) => r.timings.duration < 3000,
      "‚úì Pizza generation tiene respuesta": (r) => r.body && r.body.length > 0,
    });

    if (!generateCheck) {
      apiErrors.add(1);
    }

    successRate.add(generateCheck);

    sleep(0.5);

    // Calificar pizza (si la generaci√≥n fue exitosa)
    if (generateRes.status === 200 || generateRes.status === 201) {
      let pizzaId = "random_pizza";
      
      try {
        const respBody = JSON.parse(generateRes.body);
        if (respBody.id) {
          pizzaId = respBody.id;
        }
      } catch (e) {
        // Usar ID por defecto si no se puede parsear
      }

      const rating = Math.floor(Math.random() * 5) + 1; // Rating 1-5
      const ratingPayload = JSON.stringify({
        rating: rating,
        comment: `Great pizza! Generated with ${selectedToppings.join(", ")}`,
      });

      const rateParams = {
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        tags: { name: "RatePizza" },
      };

      const rateRes = http.post(`${BASE_URL}/api/pizza/${pizzaId}/rating`, ratingPayload, rateParams);

      const rateCheck = check(rateRes, {
        "‚úì Rating status 200/201": (r) => 
          r.status === 200 || r.status === 201 || r.status === 202 || r.status === 404,
        "‚úì Rating responde": (r) => r.timings.duration < 2000,
      });

      successRate.add(rateCheck);
    }
  });
}